(in-package #:escenario)

(declaim (type (simple-array fixnum (24 24))
               *mapa* *mapa-1* *mapa-2* *mapa-3* *mapa-4*))

(defparameter *mapa*
  (make-array '(24 24)
              :element-type 'fixnum
              :initial-contents
              '((2 1 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2)
                (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 0 0 0 0 0 2 2 2 2 2 0 0 0 0 5 0 5 0 5 0 0 0 2)
                (2 0 0 0 0 0 2 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 0 0 0 0 0 2 0 0 0 2 0 0 0 0 5 0 0 0 5 0 0 0 2)
                (2 0 0 0 0 0 2 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 0 0 0 0 0 2 2 0 2 2 0 0 0 0 5 0 5 0 5 0 0 0 2)
                (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 4 4 4 4 4 4 4 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 4 0 4 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 4 0 0 0 0 5 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 4 0 4 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 4 0 4 4 4 4 4 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 4 4 4 4 4 4 4 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))))

(defparameter *mapa-1*
  (make-array '(24 24)
              :element-type 'fixnum
              :initial-contents
              '((13 13 15 13 12 13 12 13 12 13 12 13 12 13 12 13 12 13 12 13 13 15 13 13)
                (13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (12 0 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 0 0 0 0 0 0 15)
                (13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (12 0 0 0 0 15 15 15 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (13 0 0 0 0 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (12 0 0 0 0 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (13 0 0 0 0 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (12 0 0 0 0 15 15 15 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (12 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (12 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15)
                (13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (12 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (12 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (12 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (12 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15)
                (12 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (13 15 13 12 13 12 13 15 13 12 13 12 13 12 13 12 13 12 13 12 13 12 15 12))))

(defparameter *mapa-2*
  (make-array '(24 24)
              :element-type 'fixnum
              :initial-contents
              '((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
                (1 0 0 2 0 0 0 0 3 0 0 3 0 0 0 0 0 3 0 0 0 0 0 1)
                (1 0 0 2 0 0 0 0 3 0 0 3 0 0 0 0 0 3 0 0 0 0 0 1)
                (1 0 0 0 0 0 0 0 3 0 0 3 0 0 0 0 0 3 0 0 0 0 0 1)
                (1 0 0 0 0 0 0 0 3 0 0 3 0 0 0 0 0 3 0 0 0 0 0 1)
                (1 0 0 2 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 1)
                (1 0 0 2 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 1)
                (1 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 3 0 0 0 0 0 1)
                (1 0 0 0 0 0 0 0 3 0 0 3 0 0 0 0 0 3 0 0 0 0 0 1)
                (1 0 0 2 0 0 0 0 3 0 0 3 0 0 0 0 0 3 0 0 0 0 0 1)
                (1 0 0 2 0 0 0 0 3 0 0 3 0 0 0 0 0 3 0 0 0 0 0 1)
                (1 0 0 0 0 0 0 0 3 0 0 3 3 3 3 0 0 3 3 3 3 3 3 1)
                (1 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
                (1 0 0 0 0 0 0 0 3 3 3 3 3 3 3 3 3 3 3 3 3 3 0 1)
                (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 1)
                (1 0 0 2 0 0 0 0 0 0 0 0 0 3 3 3 3 3 3 3 0 3 0 1)
                (1 0 0 2 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 3 0 3 0 1)
                (1 2 2 2 2 2 2 2 2 2 2 2 0 3 0 3 3 3 0 3 0 3 0 1)
                (1 0 0 0 0 0 2 0 0 0 0 2 0 3 0 3 0 0 0 3 0 3 0 1)
                (1 0 0 0 0 0 2 0 0 0 0 2 0 3 0 3 3 3 3 3 0 3 0 1)
                (1 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 3 0 1)
                (1 0 0 0 0 0 2 0 0 0 0 2 0 3 3 3 3 3 3 3 3 3 0 1)
                (1 0 0 0 0 0 2 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 1)
                (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))


(defparameter *mapa-3*
  (make-array '(24 24)
              :element-type 'fixnum
              :initial-contents
              '((4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 7 7 7 7 7 7 7 7)
                (4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 0 0 0 0 0 0 7)
                (4 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7)
                (4 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7)
                (4 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 7 0 0 0 0 0 0 7)
                (4 0 4 0 0 0 0 5 5 5 5 5 5 5 5 5 7 7 0 7 7 7 7 7)
                (4 0 5 0 0 0 0 5 0 5 0 5 0 5 0 5 7 0 0 0 7 7 7 1)
                (4 0 6 0 0 0 0 5 0 0 0 0 0 0 0 5 7 0 0 0 0 0 0 8)
                (4 0 7 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 7 7 1)
                (4 0 8 0 0 0 0 5 0 0 0 0 0 0 0 5 7 0 0 0 0 0 0 8)
                (4 0 0 0 0 0 0 5 0 0 0 0 0 0 0 5 7 0 0 0 7 7 7 1)
                (4 0 0 0 0 0 0 5 5 5 5 0 5 5 5 5 7 7 7 7 7 7 7 1)
                (6 6 6 6 6 6 6 6 6 6 6 0 6 6 6 6 6 6 6 6 6 6 6 6)
                (8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4)
                (6 6 6 6 6 6 0 6 6 6 6 0 6 6 6 6 6 6 6 6 6 6 6 6)
                (4 4 4 4 4 4 0 4 4 4 6 0 6 2 2 2 2 2 2 2 3 3 3 3)
                (4 0 0 0 0 0 0 0 0 4 6 0 6 2 0 0 0 0 0 2 0 0 0 2)
                (4 0 0 0 0 0 0 0 0 0 0 0 6 2 0 0 5 0 0 2 0 0 0 2)
                (4 0 0 0 0 0 0 0 0 4 6 0 6 2 0 0 0 0 0 2 2 0 2 2)
                (4 0 6 0 6 0 0 0 0 4 6 0 0 0 0 0 5 0 0 0 0 0 0 2)
                (4 0 0 5 0 0 0 0 0 4 6 0 6 2 0 0 0 0 0 2 2 0 2 2)
                (4 0 6 0 6 0 0 0 0 4 6 0 6 2 0 0 5 0 0 2 0 0 0 2)
                (4 0 0 0 0 0 0 0 0 4 6 0 6 2 0 0 0 0 0 2 0 0 0 2)
                (4 4 4 4 4 4 4 4 4 4 1 1 1 2 2 2 2 2 2 3 3 3 3 3))))

(defparameter *mapa-4*
  (make-array '(24 24)
              :element-type 'fixnum
              :initial-contents
              '((8 8 8 8 8 8 8 8 8 8 8 4 4 6 4 4 6 4 6 4 4 4 6 4)
                (8 0 0 0 0 0 0 0 0 0 8 4 0 0 0 0 0 0 0 0 0 0 0 4)
                (8 0 3 3 0 0 0 0 0 8 8 4 0 0 0 0 0 0 0 0 0 0 0 6)
                (8 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 6)
                (8 0 3 3 0 0 0 0 0 8 8 4 0 0 0 0 0 0 0 0 0 0 0 4)
                (8 0 0 0 0 0 0 0 0 0 8 4 0 0 0 0 0 6 6 6 0 6 4 6)
                (8 8 8 8 0 8 8 8 8 8 8 4 4 4 4 4 4 6 0 0 0 0 0 6)
                (7 7 7 7 0 7 7 7 7 0 8 0 8 0 8 0 8 4 0 4 0 6 0 6)
                (7 7 0 0 0 0 0 0 7 8 0 8 0 8 0 8 8 6 0 0 0 0 0 6)
                (7 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 8 6 0 0 0 0 0 4)
                (7 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 8 6 0 6 0 6 0 6)
                (7 7 0 0 0 0 0 0 7 8 0 8 0 8 0 8 8 6 4 6 0 6 6 6)
                (7 7 7 7 0 7 7 7 7 8 8 4 0 6 8 4 8 3 3 3 0 3 3 3)
                (2 2 2 2 0 2 2 2 2 4 6 4 0 0 6 0 6 3 0 0 0 0 0 3)
                (2 2 0 0 0 0 0 2 2 4 0 0 0 0 0 0 4 3 0 0 0 0 0 3)
                (2 0 0 0 0 0 0 0 2 4 0 0 0 0 0 0 4 3 0 0 0 0 0 3)
                (1 0 0 0 0 0 0 0 1 4 4 4 4 4 6 0 6 3 3 0 0 0 3 3)
                (2 0 0 0 0 0 0 0 2 2 2 1 2 2 2 6 6 0 0 5 0 5 0 5)
                (2 2 0 0 0 0 0 2 2 2 0 0 0 2 2 0 5 0 5 0 0 0 5 5)
                (2 0 0 0 0 0 0 0 2 0 0 0 0 0 2 5 0 5 0 5 0 5 0 5)
                (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5)
                (2 0 0 0 0 0 0 0 2 0 0 0 0 0 2 5 0 5 0 5 0 5 0 5)
                (2 2 0 0 0 0 0 2 2 2 0 0 0 2 2 0 5 0 5 0 0 0 5 5)
                (2 2 2 2 1 2 2 2 2 2 2 1 2 2 2 5 5 5 5 5 5 5 5 5))))

(declaim (type (simple-vector 12) *colores-mapa*))
(defparameter *colores-mapa*
  (make-array 12 :initial-contents (list +royal-blue+ +gray10+ +gray20+ +gray30+
                                         +gray40+ +gray50+ +gray60+ +gray70+
                                         +gray80+ +gray90+ +gray100+ +blue+)))

(defun dibuja-mapa (escenario pane x y tamaño)
  (declare (optimize (speed 3) (safety 0))
           (type fixnum x y tamaño))
  (let ((y-fin (+ y tamaño)))
    (declare (type fixnum y-fin))
    (with-translation (pane x y-fin)
      (loop with mapa of-type (simple-array fixnum (24 24)) = (mapa escenario)
         and pos-x single-float = (vx2 (posición escenario))
         and pos-y single-float = (vy2 (posición escenario))
         and dir-x = (vx2 (dirección escenario))
         and dir-y = (vy2 (dirección escenario))
         with num-columnas fixnum = (array-dimension mapa 1)
         with Δx fixnum = (truncate (/ tamaño num-columnas))
         for j fixnum from 0 below (array-dimension mapa 0)
         do (loop for i fixnum from 0 below num-columnas
               do (draw-rectangle* pane
                                   (* j Δx) (- (* i Δx))
                                   (* (1+ j) Δx) (- (* (1+ i) Δx))
                                   :ink (aref *colores-mapa*
                                              (aref mapa j i))))
         finally (let ((centro (make-point (* pos-x Δx)
                                           (- (* pos-y Δx))))
                       (personajes (personajes escenario)))
                   (declare (type (simple-array personaje) personajes))
                   (with-rotation (pane (atan dir-x dir-y) centro)
                     (draw-arrow* pane
                                  (* pos-x Δx)
                                  (- (* (1- pos-y) Δx))
                                  (* pos-x Δx)
                                  (- (* (1+ pos-y) Δx))
                                  :line-thickness 1.75
                                  :head-length 8
                                  :head-width 10
                                  :ink +turquoise+))
                   (when personajes
                     (loop for p across personajes
                        for s = (personaje-sprite p) do
                          (draw-circle* pane
                                        (* (sprite-x s) Δx) (- (* (sprite-y s) Δx))
                                        (/ Δx 2) :ink +red+))))))))
