(in-package #:escenario)

(declaim (type (simple-array fixnum (24 24))
               *mapa* *mapa-1* *mapa-2* *mapa-3* *mapa-4*))

(defparameter *mapa*
  (make-array '(24 24)
              :element-type 'fixnum
              :initial-contents
              '((2 1 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2)
                (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 0 0 0 0 0 2 2 2 2 2 0 0 0 0 5 0 5 0 5 0 0 0 2)
                (2 0 0 0 0 0 2 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 0 0 0 0 0 2 0 0 0 2 0 0 0 0 5 0 0 0 5 0 0 0 2)
                (2 0 0 0 0 0 2 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 0 0 0 0 0 2 2 0 2 2 0 0 0 0 5 0 5 0 5 0 0 0 2)
                (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 4 4 4 4 4 4 4 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 4 0 4 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 4 0 0 0 0 5 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 4 0 4 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 4 0 4 4 4 4 4 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 4 4 4 4 4 4 4 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2)
                (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))))

(defparameter *mapa-1*
  (make-array '(24 24)
              :element-type 'fixnum
              :initial-contents
              '((13 13 15 13 12 13 12 13 12 13 12 13 12 13 12 13 12 13 12 13 13 15 13 13)
                (13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (12 0 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 0 0 0 0 0 0 15)
                (13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (12 0 0 0 0 15 15 15 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (13 0 0 0 0 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (12 0 0 0 0 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (13 0 0 0 0 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (12 0 0 0 0 15 15 15 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (12 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (12 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15)
                (13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (12 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (12 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (12 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (12 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15)
                (12 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13)
                (13 15 13 12 13 12 13 15 13 12 13 12 13 12 13 12 13 12 13 12 13 12 15 12))))

(defparameter *mapa-2*
  (make-array '(24 24)
              :element-type 'fixnum
              :initial-contents
              '((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
                (1 0 0 2 0 0 0 0 3 0 0 3 0 0 0 0 0 3 0 0 0 0 0 1)
                (1 0 0 2 0 0 0 0 3 0 0 3 0 0 0 0 0 3 0 0 0 0 0 1)
                (1 0 0 0 0 0 0 0 3 0 0 3 0 0 0 0 0 3 0 0 0 0 0 1)
                (1 0 0 0 0 0 0 0 3 0 0 3 0 0 0 0 0 3 0 0 0 0 0 1)
                (1 0 0 2 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 1)
                (1 0 0 2 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 1)
                (1 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 3 0 0 0 0 0 1)
                (1 0 0 0 0 0 0 0 3 0 0 3 0 0 0 0 0 3 0 0 0 0 0 1)
                (1 0 0 2 0 0 0 0 3 0 0 3 0 0 0 0 0 3 0 0 0 0 0 1)
                (1 0 0 2 0 0 0 0 3 0 0 3 0 0 0 0 0 3 0 0 0 0 0 1)
                (1 0 0 0 0 0 0 0 3 0 0 3 3 3 3 0 0 3 3 3 3 3 3 1)
                (1 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
                (1 0 0 0 0 0 0 0 3 3 3 3 3 3 3 3 3 3 3 3 3 3 0 1)
                (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 1)
                (1 0 0 2 0 0 0 0 0 0 0 0 0 3 3 3 3 3 3 3 0 3 0 1)
                (1 0 0 2 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 3 0 3 0 1)
                (1 2 2 2 2 2 2 2 2 2 2 2 0 3 0 3 3 3 0 3 0 3 0 1)
                (1 0 0 0 0 0 2 0 0 0 0 2 0 3 0 3 0 0 0 3 0 3 0 1)
                (1 0 0 0 0 0 2 0 0 0 0 2 0 3 0 3 3 3 3 3 0 3 0 1)
                (1 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 3 0 1)
                (1 0 0 0 0 0 2 0 0 0 0 2 0 3 3 3 3 3 3 3 3 3 0 1)
                (1 0 0 0 0 0 2 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 1)
                (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))


(defparameter *mapa-3*
  (make-array '(24 24)
              :element-type 'fixnum
              :initial-contents
              '((4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 7 7 7 7 7 7 7 7)
                (4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 0 0 0 0 0 0 7)
                (4 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7)
                (4 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7)
                (4 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 7 0 0 0 0 0 0 7)
                (4 0 4 0 0 0 0 5 5 5 5 5 5 5 5 5 7 7 0 7 7 7 7 7)
                (4 0 5 0 0 0 0 5 0 5 0 5 0 5 0 5 7 0 0 0 7 7 7 1)
                (4 0 6 0 0 0 0 5 0 0 0 0 0 0 0 5 7 0 0 0 0 0 0 8)
                (4 0 7 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 7 7 1)
                (4 0 8 0 0 0 0 5 0 0 0 0 0 0 0 5 7 0 0 0 0 0 0 8)
                (4 0 0 0 0 0 0 5 0 0 0 0 0 0 0 5 7 0 0 0 7 7 7 1)
                (4 0 0 0 0 0 0 5 5 5 5 0 5 5 5 5 7 7 7 7 7 7 7 1)
                (6 6 6 6 6 6 6 6 6 6 6 0 6 6 6 6 6 6 6 6 6 6 6 6)
                (8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4)
                (6 6 6 6 6 6 0 6 6 6 6 0 6 6 6 6 6 6 6 6 6 6 6 6)
                (4 4 4 4 4 4 0 4 4 4 6 0 6 2 2 2 2 2 2 2 3 3 3 3)
                (4 0 0 0 0 0 0 0 0 4 6 0 6 2 0 0 0 0 0 2 0 0 0 2)
                (4 0 0 0 0 0 0 0 0 0 0 0 6 2 0 0 5 0 0 2 0 0 0 2)
                (4 0 0 0 0 0 0 0 0 4 6 0 6 2 0 0 0 0 0 2 2 0 2 2)
                (4 0 6 0 6 0 0 0 0 4 6 0 0 0 0 0 5 0 0 0 0 0 0 2)
                (4 0 0 5 0 0 0 0 0 4 6 0 6 2 0 0 0 0 0 2 2 0 2 2)
                (4 0 6 0 6 0 0 0 0 4 6 0 6 2 0 0 5 0 0 2 0 0 0 2)
                (4 0 0 0 0 0 0 0 0 4 6 0 6 2 0 0 0 0 0 2 0 0 0 2)
                (4 4 4 4 4 4 4 4 4 4 1 1 1 2 2 2 2 2 2 3 3 3 3 3))))

(defparameter *mapa-4*
  (make-array '(24 24)
              :element-type 'fixnum
              :initial-contents
              '((8 8 8 8 8 8 8 8 8 8 8 4 4 6 4 4 6 4 6 4 4 4 6 4)
                (8 0 0 0 0 0 0 0 0 0 8 4 0 0 0 0 0 0 0 0 0 0 0 4)
                (8 0 3 3 0 0 0 0 0 8 8 4 0 0 0 0 0 0 0 0 0 0 0 6)
                (8 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 6)
                (8 0 3 3 0 0 0 0 0 8 8 4 0 0 0 0 0 0 0 0 0 0 0 4)
                (8 0 0 0 0 0 0 0 0 0 8 4 0 0 0 0 0 6 6 6 0 6 4 6)
                (8 8 8 8 0 8 8 8 8 8 8 4 4 4 4 4 4 6 0 0 0 0 0 6)
                (7 7 7 7 0 7 7 7 7 0 8 0 8 0 8 0 8 4 0 4 0 6 0 6)
                (7 7 0 0 0 0 0 0 7 8 0 8 0 8 0 8 8 6 0 0 0 0 0 6)
                (7 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 8 6 0 0 0 0 0 4)
                (7 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 8 6 0 6 0 6 0 6)
                (7 7 0 0 0 0 0 0 7 8 0 8 0 8 0 8 8 6 4 6 0 6 6 6)
                (7 7 7 7 0 7 7 7 7 8 8 4 0 6 8 4 8 3 3 3 0 3 3 3)
                (2 2 2 2 0 2 2 2 2 4 6 4 0 0 6 0 6 3 0 0 0 0 0 3)
                (2 2 0 0 0 0 0 2 2 4 0 0 0 0 0 0 4 3 0 0 0 0 0 3)
                (2 0 0 0 0 0 0 0 2 4 0 0 0 0 0 0 4 3 0 0 0 0 0 3)
                (1 0 0 0 0 0 0 0 1 4 4 4 4 4 6 0 6 3 3 0 0 0 3 3)
                (2 0 0 0 0 0 0 0 2 2 2 1 2 2 2 6 6 0 0 5 0 5 0 5)
                (2 2 0 0 0 0 0 2 2 2 0 0 0 2 2 0 5 0 5 0 0 0 5 5)
                (2 0 0 0 0 0 0 0 2 0 0 0 0 0 2 5 0 5 0 5 0 5 0 5)
                (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5)
                (2 0 0 0 0 0 0 0 2 0 0 0 0 0 2 5 0 5 0 5 0 5 0 5)
                (2 2 0 0 0 0 0 2 2 2 0 0 0 2 2 0 5 0 5 0 0 0 5 5)
                (2 2 2 2 1 2 2 2 2 2 2 1 2 2 2 5 5 5 5 5 5 5 5 5))))

(declaim (type (simple-vector 12) *colores-mapa*))
(defparameter *colores-mapa*
  (make-array 12 :initial-contents (list +royal-blue+ +gray10+ +gray20+ +gray30+
                                         +gray40+ +gray50+ +gray60+ +gray70+
                                         +gray80+ +gray90+ +gray100+ +blue+)))

(defun dibuja-mapa (escenario pane x y tamaño)
  (declare (optimize (speed 3) (safety 0))
           (type fixnum x y tamaño))
  (loop with mapa of-type (simple-array fixnum (24 24)) = (mapa escenario)
     and pos-x fixnum = (truncate (vx2 (posición escenario)))
     and pos-y fixnum = (truncate (vy2 (posición escenario)))
     with num-columnas fixnum = (array-dimension mapa 1)
     with Δx fixnum = (truncate (/ tamaño num-columnas))
     for j fixnum from 0 below (array-dimension mapa 0)
     do (loop for i fixnum from 0 below num-columnas
           ;;if (zerop (aref mapa j i))
           do (draw-rectangle* pane (+ x (* j Δx)) (+ y tamaño (- (* i Δx))) (+ x (* (1+ j) Δx)) (+ y tamaño (- (* (1+ i) Δx)))
                               :ink (if (and (= i pos-y) (= j pos-x))
                                        +green+
                                        (aref *colores-mapa*
                                              (aref mapa j i))))
           ;;end
           ;;if (and (= j pos-y) (= i pos-x)) do
           ;;(draw-arrow* pane (+ x (* (+ 0.5 i) Δx)) (+ y tamaño (- (* (+ j 0.5) Δx))) (+ x (* (+ 1.5 i) Δx)) (+ y tamaño (- (* (+ j 1.5) Δx))) :ink +green+)
           ;;(draw-circle* pane (+ x (* (+ 0.5 i) Δx)) (+ y tamaño (- (* (+ j 0.5) Δx))) (truncate Δx 2) :ink +green+)
             )))
